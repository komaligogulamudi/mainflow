{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "edc2c999",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>show_id</th>\n",
       "      <th>type</th>\n",
       "      <th>title</th>\n",
       "      <th>director</th>\n",
       "      <th>cast</th>\n",
       "      <th>country</th>\n",
       "      <th>date_added</th>\n",
       "      <th>release_year</th>\n",
       "      <th>rating</th>\n",
       "      <th>duration</th>\n",
       "      <th>listed_in</th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>s1</td>\n",
       "      <td>Movie</td>\n",
       "      <td>A Spark Story</td>\n",
       "      <td>Jason Sterman, Leanne Dare</td>\n",
       "      <td>Apthon Corbin, Louis Gonzales</td>\n",
       "      <td>NaN</td>\n",
       "      <td>September 24, 2021</td>\n",
       "      <td>2021</td>\n",
       "      <td>TV-PG</td>\n",
       "      <td>88 min</td>\n",
       "      <td>Documentary</td>\n",
       "      <td>Two Pixar filmmakers strive to bring their uni...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>s2</td>\n",
       "      <td>Movie</td>\n",
       "      <td>Spooky Buddies</td>\n",
       "      <td>Robert Vince</td>\n",
       "      <td>Tucker Albrizzi, Diedrich Bader, Ameko Eks Mas...</td>\n",
       "      <td>United States, Canada</td>\n",
       "      <td>September 24, 2021</td>\n",
       "      <td>2011</td>\n",
       "      <td>G</td>\n",
       "      <td>93 min</td>\n",
       "      <td>Comedy, Fantasy, Kids</td>\n",
       "      <td>The puppies go on a spooky adventure through a...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>s3</td>\n",
       "      <td>Movie</td>\n",
       "      <td>The Fault in Our Stars</td>\n",
       "      <td>Josh Boone</td>\n",
       "      <td>Shailene Woodley, Ansel Elgort, Laura Dern, Sa...</td>\n",
       "      <td>United States</td>\n",
       "      <td>September 24, 2021</td>\n",
       "      <td>2014</td>\n",
       "      <td>PG-13</td>\n",
       "      <td>127 min</td>\n",
       "      <td>Coming of Age, Drama, Romance</td>\n",
       "      <td>Hazel and Gus share a love that sweeps them on...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>s4</td>\n",
       "      <td>TV Show</td>\n",
       "      <td>Dog: Impossible</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Matt Beisner</td>\n",
       "      <td>United States</td>\n",
       "      <td>September 22, 2021</td>\n",
       "      <td>2019</td>\n",
       "      <td>TV-PG</td>\n",
       "      <td>2 Seasons</td>\n",
       "      <td>Animals &amp; Nature, Docuseries, Family</td>\n",
       "      <td>Matt Beisner uses unique approaches to modifyi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>s5</td>\n",
       "      <td>TV Show</td>\n",
       "      <td>Spidey And His Amazing Friends</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Benjamin Valic, Lily Sanfelippo, Jakari Fraser...</td>\n",
       "      <td>United States</td>\n",
       "      <td>September 22, 2021</td>\n",
       "      <td>2021</td>\n",
       "      <td>TV-Y</td>\n",
       "      <td>1 Season</td>\n",
       "      <td>Action-Adventure, Animation, Kids</td>\n",
       "      <td>Spidey teams up with pals to become The Spidey...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  show_id     type                           title   \n",
       "0      s1    Movie                   A Spark Story  \\\n",
       "1      s2    Movie                  Spooky Buddies   \n",
       "2      s3    Movie          The Fault in Our Stars   \n",
       "3      s4  TV Show                 Dog: Impossible   \n",
       "4      s5  TV Show  Spidey And His Amazing Friends   \n",
       "\n",
       "                     director   \n",
       "0  Jason Sterman, Leanne Dare  \\\n",
       "1                Robert Vince   \n",
       "2                  Josh Boone   \n",
       "3                         NaN   \n",
       "4                         NaN   \n",
       "\n",
       "                                                cast                country   \n",
       "0                      Apthon Corbin, Louis Gonzales                    NaN  \\\n",
       "1  Tucker Albrizzi, Diedrich Bader, Ameko Eks Mas...  United States, Canada   \n",
       "2  Shailene Woodley, Ansel Elgort, Laura Dern, Sa...          United States   \n",
       "3                                       Matt Beisner          United States   \n",
       "4  Benjamin Valic, Lily Sanfelippo, Jakari Fraser...          United States   \n",
       "\n",
       "           date_added  release_year rating   duration   \n",
       "0  September 24, 2021          2021  TV-PG     88 min  \\\n",
       "1  September 24, 2021          2011      G     93 min   \n",
       "2  September 24, 2021          2014  PG-13    127 min   \n",
       "3  September 22, 2021          2019  TV-PG  2 Seasons   \n",
       "4  September 22, 2021          2021   TV-Y   1 Season   \n",
       "\n",
       "                              listed_in   \n",
       "0                           Documentary  \\\n",
       "1                 Comedy, Fantasy, Kids   \n",
       "2         Coming of Age, Drama, Romance   \n",
       "3  Animals & Nature, Docuseries, Family   \n",
       "4     Action-Adventure, Animation, Kids   \n",
       "\n",
       "                                         description  \n",
       "0  Two Pixar filmmakers strive to bring their uni...  \n",
       "1  The puppies go on a spooky adventure through a...  \n",
       "2  Hazel and Gus share a love that sweeps them on...  \n",
       "3  Matt Beisner uses unique approaches to modifyi...  \n",
       "4  Spidey teams up with pals to become The Spidey...  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from textblob import TextBlob\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.decomposition import PCA\n",
    "df=pd.read_csv(\"/home/rguktongole/Downloads/disney_plus_titles.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c166a1a8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1368 entries, 0 to 1367\n",
      "Data columns (total 12 columns):\n",
      " #   Column        Non-Null Count  Dtype \n",
      "---  ------        --------------  ----- \n",
      " 0   show_id       1368 non-null   object\n",
      " 1   type          1368 non-null   object\n",
      " 2   title         1368 non-null   object\n",
      " 3   director      928 non-null    object\n",
      " 4   cast          1194 non-null   object\n",
      " 5   country       1193 non-null   object\n",
      " 6   date_added    1365 non-null   object\n",
      " 7   release_year  1368 non-null   int64 \n",
      " 8   rating        1366 non-null   object\n",
      " 9   duration      1368 non-null   object\n",
      " 10  listed_in     1368 non-null   object\n",
      " 11  description   1368 non-null   object\n",
      "dtypes: int64(1), object(11)\n",
      "memory usage: 128.4+ KB\n"
     ]
    }
   ],
   "source": [
    "#perform text Analysis\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b6bdfc43",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "show_id           0\n",
       "type              0\n",
       "title             0\n",
       "director        440\n",
       "cast            174\n",
       "country         175\n",
       "date_added        3\n",
       "release_year      0\n",
       "rating            2\n",
       "duration          0\n",
       "listed_in         0\n",
       "description       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#null values\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2b840b6c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>release_year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1368.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2002.348684</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>22.127559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1928.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1998.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2011.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2018.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2021.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       release_year\n",
       "count   1368.000000\n",
       "mean    2002.348684\n",
       "std       22.127559\n",
       "min     1928.000000\n",
       "25%     1998.000000\n",
       "50%     2011.000000\n",
       "75%     2018.000000\n",
       "max     2021.000000"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "dd87911a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count    1368.000000\n",
      "mean        0.098366\n",
      "std         0.296196\n",
      "min        -1.000000\n",
      "25%         0.000000\n",
      "50%         0.000000\n",
      "75%         0.250000\n",
      "max         1.000000\n",
      "Name: description_sentiment, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "#Cluster Analysis Based on Type and Rating\n",
    "if 'title' in df.columns and 'description' in df.columns:\n",
    "    df['description_sentiment']=df['description'].apply(lambda x: TextBlob(x).sentiment.polarity)\n",
    "    plt.hist(df['description_sentiment'],bins=20,edgecolor='b')\n",
    "    plt.title('Sentiment Polarity Distribution of Description')\n",
    "    plt.xlabel('Sentiment Polarity')\n",
    "    plt.ylabel('Frequency')\n",
    "    plt.show()\n",
    "    print(df['description_sentiment'].describe())\n",
    "else:\n",
    "    print(\"Columns 'title'or 'description' not found in the dataset.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0644e98a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/rguktongole/.local/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cluster centers:\n",
      " [[-3.33066907e-16  0.00000000e+00]\n",
      " [ 3.13984169e-01  3.81002639e+00]\n",
      " [ 7.73684211e-01  6.84210526e+00]\n",
      " [ 3.48432056e-03  1.20905923e+00]\n",
      " [ 3.97111913e-01  5.00722022e+00]]\n",
      "\n",
      "Count of titles in Each Cluster:\n",
      "cluster\n",
      "0    235\n",
      "1    379\n",
      "2    190\n",
      "3    287\n",
      "4    277\n",
      "Name: count, dtype: int64\n",
      "\n",
      "Top Types and Ratings in Each Cluster:\n",
      "\n",
      "Cluster 0:\n",
      "Top_Types:\n",
      "type\n",
      "Movie    235\n",
      "Name: count, dtype: int64\n",
      "Top_Ratings\n",
      "rating\n",
      "G    235\n",
      "Name: count, dtype: int64\n",
      "\n",
      "Cluster 1:\n",
      "Top_Types:\n",
      "type\n",
      "Movie      260\n",
      "TV Show    119\n",
      "Name: count, dtype: int64\n",
      "Top_Ratings\n",
      "rating\n",
      "TV-G     307\n",
      "TV-14     72\n",
      "Name: count, dtype: int64\n",
      "\n",
      "Cluster 2:\n",
      "Top_Types:\n",
      "type\n",
      "TV Show    147\n",
      "Movie       43\n",
      "Name: count, dtype: int64\n",
      "Top_Ratings\n",
      "rating\n",
      "TV-Y7       130\n",
      "TV-Y         46\n",
      "TV-Y7-FV     12\n",
      "Name: count, dtype: int64\n",
      "\n",
      "Cluster 3:\n",
      "Top_Types:\n",
      "type\n",
      "Movie      286\n",
      "TV Show      1\n",
      "Name: count, dtype: int64\n",
      "Top_Ratings\n",
      "rating\n",
      "PG       227\n",
      "PG-13     60\n",
      "Name: count, dtype: int64\n",
      "\n",
      "Cluster 4:\n",
      "Top_Types:\n",
      "type\n",
      "Movie      167\n",
      "TV Show    110\n",
      "Name: count, dtype: int64\n",
      "Top_Ratings\n",
      "rating\n",
      "TV-PG    275\n",
      "TV-Y       2\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#Time series Analysis- Trend Analysis Based on Date Added\n",
    "if 'title' in df.columns and 'rating' in df.columns:\n",
    "    le_type=LabelEncoder()\n",
    "    le_rating=LabelEncoder()\n",
    "    df['type_encoded']=le_type.fit_transform(df['type'])\n",
    "    df['rating_encoded']=le_rating.fit_transform(df['rating'].astype(str))\n",
    "    X=df[['type_encoded','rating_encoded']].dropna()\n",
    "    kmeans=KMeans(n_clusters=5,random_state=42)\n",
    "    df['cluster']=kmeans.fit_predict(X)\n",
    "    pca=PCA(n_components=2)\n",
    "    X_pca=pca.fit_transform(X)\n",
    "    plt.scatter(X_pca[:,0],X_pca[:,1],c=df['cluster'],cmap='viridis')\n",
    "    plt.title('Clustering of titles based on Type ans Rating')\n",
    "    plt.xlabel('PCA Component 1')\n",
    "    plt.ylabel('PCA Component 2')\n",
    "    plt.colorbar(label='cluster')\n",
    "    plt.show()\n",
    "    print(\"cluster centers:\\n\",kmeans.cluster_centers_)\n",
    "    cluster_counts=df['cluster'].value_counts().sort_index()\n",
    "    print(\"\\nCount of titles in Each Cluster:\")\n",
    "    print(cluster_counts)\n",
    "    print(\"\\nTop Types and Ratings in Each Cluster:\")\n",
    "    for cluster in range(5):\n",
    "        cluster_data=df[df['cluster']==cluster]\n",
    "        top_types=cluster_data['type'].value_counts().head(3)\n",
    "        top_ratings=cluster_data['rating'].value_counts().head(3)\n",
    "        print(f\"\\nCluster {cluster}:\")\n",
    "        print(\"Top_Types:\")\n",
    "        print(top_types)\n",
    "        print(\"Top_Ratings\")\n",
    "        print(top_ratings)\n",
    "else:\n",
    "    print(\"Columns 'type' or 'rating' not found in the dataset.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9bec8c0a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#trend Analysis\n",
    "if 'date_added' in df.columns:\n",
    "    df['date_added']=pd.to_datetime(df['date_added'],errors='coerce')\n",
    "    df['year_added']=df['date_added'].dt.year\n",
    "    df['month_added']=df['date_added'].dt.month\n",
    "    df.groupby('year_added').size().plot(kind='bar')\n",
    "    plt.title('Number of Titles Added Per Year')\n",
    "    plt.xlabel('Year_Added')\n",
    "    plt.ylabel('Number of Titles')\n",
    "    plt.show()\n",
    "    df.groupby(\"month_added\").size().plot(kind='bar')\n",
    "    plt.title(\"Number of titles added per month\")\n",
    "    plt.xlabel('Month_Added')\n",
    "    plt.ylabel(\"Number of titles\")\n",
    "    plt.show()\n",
    "else:\n",
    "    print(\"column 'date_added' not found in dataset.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "25e3dee3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "processed data saved to 'disney_plus_titles_processed_csv'\n"
     ]
    }
   ],
   "source": [
    "#Saving the processed data\n",
    "df.to_csv(\"/home/rguktongole/Downloads/disney_plus_titles.csv\")\n",
    "print(\"processed data saved to 'disney_plus_titles_processed_csv'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "625ea4f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from statsmodels.tsa.seasonal import seasonal_decompose\n",
    "from statsmodels.tsa.holtwinters import ExponentialSmoothing\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "02dbe0f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "date_added\n",
       "2019-10-31      9\n",
       "2019-11-30    731\n",
       "2019-12-31     25\n",
       "2020-01-31     44\n",
       "2020-02-29     20\n",
       "Freq: M, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"/home/rguktongole/Downloads/disney_plus_titles.csv\")\n",
    "\n",
    "df['date_added'] = pd.to_datetime(df [ 'date_added'], errors='coerce')\n",
    "\n",
    "df = df.dropna(subset=['date_added'])\n",
    "\n",
    "df.set_index ('date_added', inplace=True)\n",
    "\n",
    "monthly_titles =df.resample ('M'). size ()\n",
    "monthly_titles.head ()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "02427f67",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'seasonal_decompose' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[1], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m decomposition\u001b[38;5;241m=\u001b[39m\u001b[43mseasonal_decompose\u001b[49m(monthly_titles,model\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124madditive\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m      2\u001b[0m fig, (ax1, ax2, ax3, ax4) \u001b[38;5;241m=\u001b[39m plt\u001b[38;5;241m.\u001b[39msubplots(\u001b[38;5;241m4\u001b[39m,\u001b[38;5;241m1\u001b[39m,figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m12\u001b[39m,\u001b[38;5;241m10\u001b[39m),sharex\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[1;32m      3\u001b[0m decomposition\u001b[38;5;241m.\u001b[39mobserved\u001b[38;5;241m.\u001b[39mplot(ax\u001b[38;5;241m=\u001b[39max1)\n",
      "\u001b[0;31mNameError\u001b[0m: name 'seasonal_decompose' is not defined"
     ]
    }
   ],
   "source": [
    "decomposition=seasonal_decompose(monthly_titles,model='additive')\n",
    "fig, (ax1, ax2, ax3, ax4) = plt.subplots(4,1,figsize=(12,10),sharex=True)\n",
    "decomposition.observed.plot(ax=ax1)\n",
    "ax1.set_ylabel('observed')\n",
    "\n",
    "decomposition.trend.plot(ax=ax2)\n",
    "ax2.set_ylabel('trend')\n",
    "\n",
    "decomposition.seasonal.plot(ax=ax3)\n",
    "ax3.set_ylabel('seasonal')\n",
    "\n",
    "decomposition.resid.plot(ax=ax4)\n",
    "ax4.set_ylabel('residual')\n",
    "\n",
    "plt.xlabel('Date')\n",
    "plt.tight_layout ()\n",
    "plt.show ()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8f69d538",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = ExponentialSmoothing ( monthly_titles, seasonal='add' , seasonal_periods=12)\n",
    "fit=model.fit()\n",
    "\n",
    "forecast =fit.forecast(12)\n",
    "\n",
    "plt.figure(figsize=(12,5))\n",
    "plt.plot(monthly_titles, label='observed')\n",
    "plt.plot(forecast, label ='Forecast', linestyle ='--')\n",
    "plt.xlabel ('Date')\n",
    "plt.ylabel ('Number of titles added ')\n",
    "plt.title('Monthly titles added to Disney plus ')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8cd21342",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
